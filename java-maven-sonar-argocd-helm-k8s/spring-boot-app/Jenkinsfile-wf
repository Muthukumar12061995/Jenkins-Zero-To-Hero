pipeline {
    agent {
        docker {
            image "abhishekf5/maven-abhishek-docker-agent:v1"
            // Mount host docker sock to access docker daemon
            args "--user root -v /var/run/docker.sock:/var/run/docker.sock"
        }
    }
    environment 
    {
        DOCKER_REGISTRY_CREDENTIAL = credentials('docker-hub')
    }
    stages 
    {
        stage('checkout')
        {
            steps 
            {
                sh 'echo "ready to checkout"'
                git branch: 'main', url: 'https://github.com/Muthukumar12061995/Jenkins-Zero-To-Hero.git'
            }
        }

        stage('build')
        {
            steps
            {
                sh 'echo "maven to start build"'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }

        stage('code-review')
        {
            steps
            {
            withCredentials([string(credentialsId: 'sonarqube',variable: 'SONAR_AUTH_TOKEN')]){
                sh 'echo static-code-review'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=http://3.86.185.37:9000/'
            }
            }
        }
        
        stage('Build and push docker image to hub')
        {
        environment {
            DOCKER_IMAGE = "mk1206/ultimate-cicd:${BUILD_NUMBER}"
            //DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
            //REGISTRY_CREDENTIALS_ID = 'dockerhub'
        }
        steps
        {
            script 
            {
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                def dockerImage = docker.image("${DOCKER_IMAGE}")
                docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_REGISTRY_CREDENTIAL}") {
                    dockerImage.push()
                }
            }
        }
        }
    }
}
